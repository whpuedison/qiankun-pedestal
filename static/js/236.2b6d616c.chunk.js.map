{"version":3,"file":"static/js/236.2b6d616c.chunk.js","mappings":"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","sources":["pages/virtual-list-pro/index.js","webpack://react-practice/./src/pages/virtual-list-pro/index.less?d384"],"sourcesContent":["import React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { throttle } from 'lodash'\nimport { root, chatList, renderList, chatItem, chatContent, nickname, message, unReadInfo } from './index.less'\nimport Mock from 'mockjs';\n\nconst generateChatData = (num) => {\n    // 当 num 小于等于 0 时返回空数组\n    if (num <= 0) {\n        return [];\n    }\n\n    // 确保 Mock.mock 能正确生成单个对象的数组\n    const result = Mock.mock({\n        [`chats|${num}`]: [\n            {\n                'id|+1': 0,\n                'avatar': function() {\n                    return Mock.Random.image('100x100', Mock.Random.color(), '#000000', 'Avatar');\n                }, // 生成头像图片的 URL，背景色为随机色\n                'nickname': '@cname', // 中文名字\n                'message': () => Mock.mock('@csentence(1, 20)')\n            }\n        ]\n    });\n\n    // 检查返回结果是否是数组，如果不是则处理为数组\n    return result.chats instanceof Array ? result.chats : [result.chats];\n};\n\n// const chatData = generateChatData(200);\n\nconst INIT_ITEM_HEIGHT = 48; // 初始列表项高度\nconst BUFFER_COUNT = 0; // 列表项需要缓冲的数量\nconst MIN_FRESH_TIME = 1000 // 消息队列刷新时间\n\nconst VirtualListPro = () => {\n    const [list, setList] = useState([]) // 完整数据\n    const preListRef = useRef([]) // 前一批完整数据\n    const [data, setData] = useState([]) // 渲染数据\n    const [listHeight, setListHeight] = useState(0) // 列表高度\n    const [renderCount, setRenderCount] = useState(0) // 列表项需要渲染的数量\n    const [start, setStart] = useState(0) // 列表项开始渲染的位置\n    const [end, setEnd] = useState(0) // 列表项结束渲染的位置\n    const [currentOffset, setCurrentOffset] = useState(0) // 偏移量\n    const [positions, setPositions] = useState([\n        // index 当前元素的下标\n        // top 顶部位置\n        // bottom 底部位置\n        // height 元素的高度\n        // dHeight 用于判断元素是否需要改变\n    ]) // 需要记录每一项的高度\n\n    const chatRef = useRef() // 聊天区\n    const renderRef = useRef() // 渲染区\n    const cacheQueueRef = useRef([]) // 缓存消息队列\n    const delayTimer = useRef(null) // 缓存计时器\n    const chatTimer = useRef(null) // 聊天计时器\n    const isAutoScrollRef = useRef(true) // 是否需要自动滚动\n\n    const unReadInfoCount = useMemo(() => {\n        return isAutoScrollRef.current ? 0 : list.length - preListRef.current.length\n    }, [list, isAutoScrollRef.current]) // 未读消息数量\n\n    // 模拟聊天，在一定时间内缓存消息\n    const appendData = () => {\n        // 生成一个介于 x 到 y 之间的随机数量的数据\n        const numEntries = Mock.Random.integer(0, 1);\n        const newChatData = generateChatData(numEntries);\n        cacheQueueRef.current = [...cacheQueueRef.current, ...newChatData];\n        if (!delayTimer.current) {\n            delayTimer.current = setTimeout(() => {\n                const cacheQueueList = cacheQueueRef.current;\n                cacheQueueRef.current = []\n                setList(val => [...val, ...cacheQueueList].map((item, index) => ({...item, id: index })));\n                clearTimeout(delayTimer.current)\n                delayTimer.current = null;\n            }, MIN_FRESH_TIME);\n        }\n    }\n\n    useEffect(() => {\n        // 定时添加聊天\n        chatTimer.current = setInterval(() => {\n            appendData()\n        }, 1000);\n\n        return () => {\n            clearInterval(chatTimer.current)\n        };\n    }, [])\n\n    // 滚动到最底部\n    const scrollToBottom = ({ forceScroll } = {}) => {\n        if (isAutoScrollRef.current || forceScroll) {\n            preListRef.current = list\n            chatRef.current.scrollTo(\n                {\n                    top: forceScroll ? list.length * INIT_ITEM_HEIGHT * 4 : listHeight,\n                    behavior: \"smooth\"\n                }\n            )\n        }\n    }\n\n    useEffect(() => {\n        scrollToBottom()\n    }, [listHeight])\n\n    const initPositions = () => {\n        const data = []\n        for (let i = 0; i < list.length; i++) {\n            data.push({\n                index: i,\n                height: INIT_ITEM_HEIGHT,\n                top: i * INIT_ITEM_HEIGHT,\n                bottom: (i + 1) * INIT_ITEM_HEIGHT,\n                dHeight: 0\n            })\n        }\n        setPositions(data)\n    }\n\n    useEffect(() => {\n        // 初始高度\n        initPositions()\n      }, [list])\n\n      const setPostition = () => {\n        const nodes = renderRef.current?.childNodes\n        if (!nodes.length) return\n        nodes.forEach(node => {\n            if (!node) return\n            const rect = node.getBoundingClientRect() // 获取元素的信息\n            const index = +node.id // 获取元素的索引\n            const oldHeight = positions[index].height // 获取旧的高度\n            const newHeight = rect.height // 获取新的高度\n            const dHeight = oldHeight - newHeight  // 元素需要改变的高度\n            if (dHeight) {\n                positions[index] = {\n                    ...positions[index],\n                    height: newHeight,\n                    bottom: positions[index].bottom - dHeight, // 将自身能算的先算\n                    dHeight: dHeight //差值保留，留给后面元素计算使用\n                }\n            }\n        })\n        const startId = +nodes[0].id // 开始渲染的元素的索引\n        const positionsLength = positions.length\n        let totalDHeight = positions[startId].dHeight // 累计差值，仅对后面元素有影响\n        positions[startId].dHeight = 0\n        for (let i = startId + 1; i < positionsLength; i++) {\n            const item = positions[i]\n            positions[i] = {\n                ...positions[i],\n                top: positions[i - 1]?.bottom,\n                bottom: positions[i].bottom - totalDHeight, // 将自身能算的先算\n            }\n            if (item.dHeight) {\n                totalDHeight += item.dHeight\n                positions[i].dHeight = 0\n            }\n        }\n        setListHeight(positions.at(-1)?.bottom)\n      }\n\n      useEffect(() => {\n        if (renderRef.current) {\n            setPostition()\n        }\n      }, [renderRef.current])\n\n    // 监听列表长度变化，更新显示\n    useEffect(() => {\n        if (!isAutoScrollRef.current) return\n        const chatAreaHeight = chatRef.current?.offsetHeight // 聊天区域高度\n        const _renderCount = Math.ceil(chatAreaHeight / INIT_ITEM_HEIGHT) // 所需渲染的列表项\n        const _listHeight = positions.at(-1)?.bottom // 列表长度\n        const _end = list.length\n        const _start = Math.max(0, _end - (renderCount + BUFFER_COUNT))\n        setRenderCount(_renderCount)\n        setStart(_start)\n        setEnd(_end)\n        setData(list.slice(_start, _end))\n        setListHeight(_listHeight)\n    }, [chatRef.current, list])\n\n    const binarySearch = () => {\n        const { scrollTop } = chatRef.current\n        let startIndex = 0\n        let endIndex = positions.length - 1\n        let tempIndex = null\n        while (startIndex <= endIndex) {\n            const midIndex = Math.floor((startIndex + endIndex) / 2)\n            const midVal = positions[midIndex].bottom\n            if (midVal === scrollTop) {\n                return midIndex + 1\n            } else if (midVal < scrollTop) {\n                startIndex = midIndex + 1\n            } else if (midVal > scrollTop) {\n                if (tempIndex === null || tempIndex > midIndex) {\n                    tempIndex = midIndex\n                }\n                endIndex -= 1\n            }\n        }\n        return tempIndex\n    }\n\n    const handleScroll = throttle(() => {\n        const _start = binarySearch()\n        const _end = _start + renderCount + BUFFER_COUNT\n        setStart(_start)\n        setEnd(_end)\n        setCurrentOffset(_start > 0 ? positions[_start - 1].bottom : 0)\n        // 判断是否在底部\n        const { scrollHeight, clientHeight, scrollTop } = chatRef.current\n        isAutoScrollRef.current = scrollHeight - clientHeight - scrollTop <= 0\n    }, 100)\n\n    useEffect(() => {\n        setData(list.slice(start, end))\n        if (renderRef.current) {\n            setPostition()\n        }\n    }, [start])\n\n    return (\n        <div className={root}>\n            <div \n                className={chatList} \n                ref={chatRef}\n                onScroll={handleScroll}\n            >\n                <div style={{height: `${listHeight}px`}}></div>\n                {/* 虚拟列表 */}\n                <div \n                    style={{ transform: `translate3d(0, ${currentOffset}px, 0)`}}\n                    className={renderList} \n                    ref={renderRef}\n                >\n                    {\n                        data?.map((item, index) => (\n                            <div id={item.id} key={index} className={chatItem}>\n                                <img src={item.avatar} alt=\"avatar\" />\n                                <div className={chatContent}>\n                                    <div className={nickname}>{item.nickname}</div>\n                                    <div className={message}>{item.message}</div>\n                                </div>\n                            </div>\n                        ))\n                    }\n                </div>\n                {/* 数据累加 */}\n                {/* <div className={renderList} >\n                    {\n                        list?.map((item, index) => (\n                            <div id={item.id} key={index} className={chatItem}>\n                                <img src={item.avatar} alt=\"avatar\" />\n                                <div className={chatContent}>\n                                    <div className={nickname}>{item.nickname}</div>\n                                    <div className={message}>{item.message}</div>\n                                </div>\n                            </div>\n                        ))\n                    }\n                </div> */}\n                { !!unReadInfoCount &&\n                    <div \n                        onClick={() => scrollToBottom({forceScroll: true})} \n                        className={unReadInfo}\n                    >{unReadInfoCount}条新消息</div>\n                }\n            </div>\n        </div>\n    )    \n}\n\nexport default VirtualListPro","// extracted by mini-css-extract-plugin\nvar _1 = \"index_chatContent__YhNMK\";\nvar _2 = \"index_chatItem__oAB-A\";\nvar _3 = \"index_chatList__M3SqR\";\nvar _4 = \"index_message__MlQBf\";\nvar _5 = \"index_nickname__clMz+\";\nvar _6 = \"index_renderList__NORW9\";\nvar _7 = \"index_root__nVKdf\";\nvar _8 = \"index_unReadInfo__J6M8N\";\nexport { _1 as \"chatContent\", _2 as \"chatItem\", _3 as \"chatList\", _4 as \"message\", _5 as \"nickname\", _6 as \"renderList\", _7 as \"root\", _8 as \"unReadInfo\" }\n"],"names":["VirtualListPro","list","setList","useState","preListRef","useRef","data","setData","listHeight","setListHeight","renderCount","setRenderCount","start","setStart","end","setEnd","currentOffset","setCurrentOffset","positions","setPositions","chatRef","renderRef","cacheQueueRef","delayTimer","chatTimer","isAutoScrollRef","unReadInfoCount","useMemo","current","length","appendData","newChatData","num","result","Mock","concat","image","color","message","chats","Array","generateChatData","integer","setTimeout","cacheQueueList","val","map","item","index","id","clearTimeout","useEffect","setInterval","clearInterval","scrollToBottom","forceScroll","arguments","undefined","scrollTo","top","behavior","initPositions","i","push","height","bottom","dHeight","setPostition","_renderRef$current","_positions$at","nodes","childNodes","forEach","node","rect","getBoundingClientRect","oldHeight","newHeight","startId","positionsLength","totalDHeight","_positions","at","_chatRef$current","_positions$at2","chatAreaHeight","offsetHeight","_renderCount","Math","ceil","_listHeight","_end","_start","max","slice","handleScroll","throttle","binarySearch","scrollTop","startIndex","endIndex","tempIndex","midIndex","floor","midVal","scrollHeight","clientHeight","_jsx","className","children","_jsxs","ref","onScroll","style","transform","src","avatar","alt","nickname","onClick"],"sourceRoot":""}