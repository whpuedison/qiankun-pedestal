{"version":3,"file":"static/js/774.ea5fa245.chunk.js","mappings":"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","sources":["pages/virtual-list/index.js","webpack://react-practice/./src/pages/virtual-list/index.less?23cc"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { throttle } from 'lodash'\nimport { root, realList, chatItem, chatContent, nickname, message, newMessage } from './index.less';\nimport Mock from 'mockjs';\n\n// 定义表情包\nconst emojis = [\n    '😀', '😂', '😍', '😎', '😭', '😡', '😜', '😇', '😱', '😈',\n    '👍', '👎', '🥺', '😢', '😳', '😋', '😬', '😑', '🥳', '😴'\n];\n\nconst generateMessageWithEmojis = () => {\n    // 生成 10 到 20 个表情包\n    const numberOfEmojis = Mock.Random.integer(5, 10);\n    const emojisString = Array.from({ length: numberOfEmojis }, () => Mock.Random.pick(emojis)).join(' ');\n    return emojisString;\n};\n\nconst generateChatData = (num) => {\n    // 当 num 小于等于 0 时返回空数组\n    if (num <= 0) {\n        return [];\n    }\n\n    // 确保 Mock.mock 能正确生成单个对象的数组\n    const result = Mock.mock({\n        [`chats|${num}`]: [\n            {\n                'avatar': '@image(\"100x100\", \"#ffccff\", \"#000000\", \"Avatar\")', // 生成头像图片的 URL\n                'nickname': '@cname', // 中文名字\n                'message': () => generateMessageWithEmojis() // 生成带有多个表情包的发言\n            }\n        ]\n    });\n\n    // 检查返回结果是否是数组，如果不是则处理为数组\n    return result.chats instanceof Array ? result.chats : [result.chats];\n};\n\nconst chatData = generateChatData(200);\n\n// 创建 IntersectionObserver 实例\n// const observer = new IntersectionObserver((entries, observer) => {\n//     entries.forEach(entry => {\n//         if (entry.isIntersecting) {\n//             console.log('目标元素进入视口');\n//             // 可以在这里处理目标元素进入视口后的逻辑\n//             // 例如，加载图片或执行动画\n//         } else {\n//             console.log('目标元素离开视口');\n//             // 可以在这里处理目标元素离开视口后的逻辑\n//         }\n//     });\n// }, {\n//     root: null, // 视口为默认的浏览器视口\n//     rootMargin: '0px', // 视口的边距\n//     threshold: 1.0 // 目标元素的可见度阈值（1.0表示完全可见）\n// });\n\nconst MIN_FRESH_TIME = 1000;\nconst CHAT_ITEM_HEIGHT = 50;\nconst RESTOCK_COUNT = 4\n\nconst VirtualList = () => {\n    const [chatList, setChatList] = useState(chatData);\n    const preChatListRef = useRef([])\n    const preChatList = preChatListRef.current\n    const realListRef = useRef()\n    const delayTimer = useRef()\n    const cacheQueue = useRef([])\n    const [startIndex, setStartIndex] = useState(0)\n    const [endIndex, setEndIndex] = useState(0)\n    const rootRef = useRef()\n    const fillCountRef = useRef(0)\n    const totalHeight = chatList.length * CHAT_ITEM_HEIGHT\n    const visibleList = chatList?.slice(startIndex, endIndex)\n    const initFlag = useRef(true)\n    const isScrollAtBottomFlag = useRef(true)\n    const newMessageCount = chatList.length - preChatList.length\n    const [showMessageCount, setShowMessageCount] = useState(false)\n\n    const appendData = () => {\n        // 生成一个介于 x 到 y 之间的随机数量的数据\n        const numEntries = Mock.Random.integer(0, 1);\n        const newChatData = generateChatData(numEntries);\n        cacheQueue.current = [...cacheQueue.current, ...newChatData];\n        if (!delayTimer.current) {\n            delayTimer.current = setTimeout(() => {\n                const cacheQueueList = cacheQueue.current;\n                cacheQueue.current = []\n                setChatList(list => [...list, ...cacheQueueList]);\n                clearTimeout(delayTimer.current)\n                delayTimer.current = null;\n            }, MIN_FRESH_TIME);\n        }\n    }\n\n    const scrollIntoBottom = active => {\n        if (chatList.length) {\n            const chatLength = chatList.length\n            const totalCount = fillCountRef.current + RESTOCK_COUNT\n            const _startIndex = chatLength - totalCount\n            if(initFlag.current || isScrollAtBottomFlag.current || active) {\n                preChatListRef.current = chatList\n                setShowMessageCount(false)\n                setStartIndex(_startIndex)\n                setEndIndex(chatLength)\n                realListRef.current.style.transform = `translate3d(0, ${_startIndex * CHAT_ITEM_HEIGHT}px, 0)`\n                rootRef.current.scrollTo(\n                    {\n                        top: totalHeight,\n                        behavior: \"smooth\"\n                    }\n                )\n                initFlag.current = false\n            } else {\n                setShowMessageCount(true)\n            }\n        }\n    }\n\n    const isScrollAtBottom = () => {\n        const { scrollHeight, scrollTop, clientHeight } = rootRef.current\n        return scrollTop + clientHeight >= scrollHeight\n    }\n\n    useEffect(() => {\n        rootRef.current.addEventListener('scroll', throttle(() => {\n            isScrollAtBottomFlag.current = isScrollAtBottom()\n        }, 500))\n    }, [])\n\n    const handleScroll = throttle(() => {\n        const { scrollTop } = rootRef.current\n        const newStartIndex = Math.floor(scrollTop / CHAT_ITEM_HEIGHT)\n        const newEndIndex = newStartIndex + fillCountRef.current + RESTOCK_COUNT\n        if (newStartIndex!== startIndex) {\n            setStartIndex(newStartIndex)\n            setEndIndex(newEndIndex)\n            realListRef.current.style.transform = `translate3d(0, ${newStartIndex * CHAT_ITEM_HEIGHT}px, 0)`\n        }\n    }, 200)\n\n    useEffect(() => {\n        requestAnimationFrame(() => scrollIntoBottom())\n    }, [chatList])\n\n    const caculateFillCount = () => {\n        const rootHight = rootRef.current.offsetHeight\n        fillCountRef.current = Math.ceil(rootHight / CHAT_ITEM_HEIGHT)\n    }\n\n    useEffect(() => {\n        // 计算填充数量\n        caculateFillCount()\n\n        setInterval(() => {\n            appendData()\n        }, 1000);\n\n        // 清理延迟计时器\n        return () => {\n            if (delayTimer.current) {\n                clearTimeout(delayTimer.current);\n            }\n        };\n    }, []);\n\n    return (\n        <div className={root} ref={rootRef} onScroll={handleScroll}>\n            <div style={{height: `${totalHeight}px`}}/>\n            <div className={realList} ref={realListRef}>\n                {\n                    visibleList?.map((item, index) => (\n                        <div key={index} className={chatItem}>\n                            <img src={item.avatar} alt=\"avatar\" />\n                            <div className={chatContent}>\n                                <div className={nickname}>{item.nickname}</div>\n                                <div className={message}>{item.message}</div>\n                            </div>\n                        </div>\n                    ))\n                }\n            </div>\n            { showMessageCount && !!newMessageCount &&\n                <div onClick={() => scrollIntoBottom(true)} className={newMessage}>{newMessageCount}条新消息</div>\n            }\n        </div>\n    )\n}\n\nexport default VirtualList","// extracted by mini-css-extract-plugin\nvar _1 = \"index_chatContent__jSAWw\";\nvar _2 = \"index_chatItem__AxRP1\";\nvar _3 = \"index_message__dUNFF\";\nvar _4 = \"index_newMessage__taTXs\";\nvar _5 = \"index_nickname__1XPqr\";\nvar _6 = \"index_realList__ELPbZ\";\nvar _7 = \"index_root__DNVO2\";\nexport { _1 as \"chatContent\", _2 as \"chatItem\", _3 as \"message\", _4 as \"newMessage\", _5 as \"nickname\", _6 as \"realList\", _7 as \"root\" }\n"],"names":["emojis","generateChatData","num","result","Mock","concat","message","generateMessageWithEmojis","numberOfEmojis","integer","Array","from","length","pick","join","chats","chatData","VirtualList","chatList","setChatList","useState","preChatListRef","useRef","preChatList","current","realListRef","delayTimer","cacheQueue","startIndex","setStartIndex","endIndex","setEndIndex","rootRef","fillCountRef","totalHeight","visibleList","slice","initFlag","isScrollAtBottomFlag","newMessageCount","showMessageCount","setShowMessageCount","scrollIntoBottom","active","chatLength","_startIndex","style","transform","scrollTo","top","behavior","useEffect","addEventListener","throttle","isScrollAtBottom","scrollHeight","scrollTop","clientHeight","handleScroll","newStartIndex","Math","floor","newEndIndex","requestAnimationFrame","caculateFillCount","rootHight","offsetHeight","ceil","setInterval","appendData","numEntries","newChatData","setTimeout","cacheQueueList","list","clearTimeout","_jsxs","className","ref","onScroll","children","_jsx","height","map","item","index","src","avatar","alt","nickname","onClick"],"sourceRoot":""}